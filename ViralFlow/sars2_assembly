#!/bin/bash

#================================================================
# HEADER
#================================================================
#% USAGE
#%    $bash sars2_assembly <REFERENCEGENOME> <001.fastq.gz> <002.fastq.gz> <PREFIX> <NUM_THREADS> <DEPTH> <MIN_LEN> <ADAPTERS> <DP_INTRAHOST> <TRIMM_LEN>
#%
#% DESCRIPTION
#%    This script performs a reference guided genome assembly of SARS-CoV-2. Python scripts were developed based on the wuhan SARS-CoV-2 reference genome NC_045512.2.
#%    The workflow was developed to work with Illumina paired-end reads. Tests with other technologies should be performed.
#%
#% OPTIONS
#%    <REFERENCEGENOME>    -   Fasta file with reference genome
#%    <001.fastq.gz>       -   Fasqt file with positive sense reads (R1)
#%    <002.fastq.gz>       -   Fastq file with negative sense reads (R2)
#%    <PREFIX>             -   Prefix string to store results and to rename consensus genome
#%    <NUM_THREADS>        -   Number of threads
#%    <DEPTH>              -   Minimum depth to mask unanssembled regions
#%    <MIN_LEN>            -   Minimum length to trimm sequences
#%    <ADAPTERS>           -   Fasta file with adapters used in the sequencing analysis
#%    <DP_INTRAHOST>       -   Minimum depth to consider a intrahost minor allele, optional, default = 100
#%    <TRIMM_LEN>           -   Length to trimm front and tail of reads, optional, default = 0
#%
#% EXAMPLES
#%    $bash sars2_assembly reference.fasta code_R1.fastq.gz code_R2.fastq.gz prefix_name 8 5 75 adapters.fa
#%    $bash sars2_assembly reference.fasta code_R1.fastq.gz code_R2.fastq.gz prefix_name 8 5 75 adapters.fa 50 5
#%
#% DEPENDENCIES
#%    BWA Version: 0.7.17-r1188
#%    samtools 1.10 Using htslib 1.10.2
#%    fastp 0.22.0
#%    iVar version 1.3.1
#%    bam-readcount version: 0.8
#%    Python 3.6.10
#%    mafft 7.490 (2021/Oct/30)
#%    nextclade 0.14.4
#%    pangolin 3.1.17
#%    seqkit v2.1.0
#%    seqtk 1.3-r106
#%    exonerate version 2.4.0 Using glib version 2.68.0
#%
#================================================================
#- IMPLEMENTATION
#-    version         $sars2_assembly 0.0.5
#-    authors         Filipe Dezordi and Gabriel Wallau
#-    maintainer      Filipe Dezordi (zimmer.filipe@gmail.com)
#-    username        dezordi
#-    license         GPL
#-    information     dezordi.github.io
#================================================================
#  HISTORY
#     2021/04/17 : dezordi : Script creation
#     2021/06/22 : dezordi : Update, improve indels recognition into intrahost variant analysis
#     2021/09/11 : dezordi : Update, improve consensus assembly of low quality mapping regions, insertion of exact coverage percentage based on depth treshold, create arguments to modify depth treshold of intrahost minor alleles and to trimm reads.
#
#================================================================
# ARGUMENTS
#================================================================

FASTA=$1 #reference genome
FASTQ1=$2 #foward reads
FASTQ2=$3 #reverse reads
PREFIXOUT=$4 #prefix for output
THREADS=$5 #number of threads
DEPTH=$6 #minum depth to mask regions
MIN_LEN=$7 #minimum length to trimm reads
ADAPTERS=$8 #fasta file with adapters
ANALYSISDIR=$9 #analysis directory
DP_INTRAHOST=${10-100} #minimum dp for intrahost analysis
TRIMM_LEN=${11-0} #length to trim front and tail reads with fastp

#================================================================
# WORKFLOW
#================================================================

VIRALFLOWDIR=$HOME/IGM_SARSCOV2/ViralFlow
##CREATING INDEX OF REFERENCE GENOME
python $VIRALFLOWDIR/bwa_index.py -in $FASTA
##CREATING DIRECTORY TO STORE RESULTS
cd $ANALYSISDIR
mkdir $PREFIXOUT.results/
cd $PREFIXOUT.results
##QUALITY CHECK
echo "fastp analysis:" > $PREFIXOUT.time.txt
start=$(date +%s%3N)
python $VIRALFLOWDIR/fastp.py -f1 $FASTQ1 -f2 $FASTQ2 -pr $PREFIXOUT -mi $MIN_LEN -p $THREADS -a $ADAPTERS -t $TRIMM_LEN
end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes=$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))
echo $analysis_in_minutes >> $PREFIXOUT.time.txt
##MAPPING
echo "BWA and iVar analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)
python $VIRALFLOWDIR/bwa_mem.py -f $FASTA -pr $PREFIXOUT -p $THREADS
python $VIRALFLOWDIR/ivar.py -f $FASTA -pr $PREFIXOUT -dp $DEPTH
end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes=$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))
echo $analysis_in_minutes >> $PREFIXOUT.time.txt
##GET PUTATIVE MINOR VARIANTS STEP
echo "Minor variant analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)
python $VIRALFLOWDIR/get_mvs.py -f $FASTA -pr $PREFIXOUT -dp $DEPTH -p $THREADS -di $DP_INTRAHOST
end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes=$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))
echo $analysis_in_minutes >> $PREFIXOUT.time.txt
##GET LINEAGE AND MUTATIONS
#echo "Nextclade and Pangolin analysis:" >> $PREFIXOUT.time.txt
#start=$(date +%s%3N)
#python ../python_scripts/pango_nextclade.py -pr $PREFIXOUT -dp $DEPTH -p $THREADS
#end=$(date +%s%3N)
#analysis_in_miliseconds=$(expr $end - $start)
#analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
#echo $analysis_in_minutes >> $PREFIXOUT.time.txt
##GET ASSEMBLY METRICS
#echo "bamdst analysis:" >> $PREFIXOUT.time.txt
#start=$(date +%s%3N)
#python ../python_scripts/assembly_metrics.py -pr $PREFIXOUT
#COV=$(seqtk comp $PREFIXOUT.depth$DEPTH.fa | awk '{x=$3+$4+$5+$6;y=$2;print $1,y-x,y,100-((y-x)/y)*100}' | cut -f 4 -d ' ')
#printf "cov_$DEPTH%%\n$COV" > coverage.txt
#paste chromosomes.report coverage.txt > chromosomes.report.tmp
#rm chromosomes.report && mv chromosomes.report.tmp chromosomes.report
#end=$(date +%s%3N)
#analysis_in_miliseconds=$(expr $end - $start)
#analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
#echo $analysis_in_minutes >> $PREFIXOUT.time.txt
cd ..
